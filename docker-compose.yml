services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: airassist-postgres
    environment:
      POSTGRES_DB: airassist
      POSTGRES_USER: airassist_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - airassist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airassist_user -d airassist"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: airassist-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - airassist-network
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: airassist-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - airassist-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airassist-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://airassist_user:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/airassist
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-fallback-secret-key-please-change}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - airassist-network
    volumes:
      - ./data:/app/data
      - app_uploads:/app/uploads
    restart: unless-stopped

  # nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: airassist-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - airassist-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local

networks:
  airassist-network:
    driver: bridge